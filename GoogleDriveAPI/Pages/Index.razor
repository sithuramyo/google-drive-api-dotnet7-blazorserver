@page "/"
@inject ISnackbar Snackbar

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" AppendMultipleFiles Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
     @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
         <ButtonTemplate>
             <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                 <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                 @foreach (var file in fileNames)
                {
                    <MudChip Color="Color.Dark" Text="@file" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>
@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();
    private byte[] fileContent;
    private IBrowserFile file;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        file = e.File;
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            fileNames.Add(file.Name);
        }
    }

    private async Task Clear()
    {
        fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }
    private async Task Upload()
    {
        var filePath = await SaveFile(file);
        var fileMetadata = new Google.Apis.Drive.v3.Data.File()
            {
                Name = fileNames[0],
                Parents = new[] { _service.GetGoogleDriveFolderId() },
            };
        // var data = await _service.UploadToGoogleDrive(filePath, fileMetadata);
        // if (!string.IsNullOrWhiteSpace(data))
        // {
        //     if (File.Exists(filePath))
        //     {
        //         File.Delete(filePath);
        //     }
        // }
        if (File.Exists(filePath))
        {
            File.Delete(filePath);
        }
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!", Severity.Normal);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    private async Task<string> SaveFile(IBrowserFile fileContent)
    {
        long maxFileSize = 9919193 * 100;
        string extension = fileContent.ContentType.Split("/")[1].ToLower();
        string fileName = Guid.NewGuid().ToString("N");
        string folderPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory,
            "ForGoogleDrive");
        Directory.CreateDirectory(folderPath);
        string filePath = Path.Combine(folderPath, $"{fileName}.{extension}");
        await using FileStream fs = new(filePath, FileMode.Create);
        await fileContent.OpenReadStream(maxFileSize).CopyToAsync(fs);
        fs.Dispose();

        return filePath;
    }
}